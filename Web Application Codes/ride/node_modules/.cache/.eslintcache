[{"E:\\GOKADA_MAP-master\\src\\index.js":"1","E:\\GOKADA_MAP-master\\src\\App.js":"2","E:\\GOKADA_MAP-master\\src\\reportWebVitals.js":"3","E:\\GOKADA_MAP-master\\src\\Screens\\MapsPage.js":"4","E:\\GOKADA_MAP-master\\src\\Components\\AutoComplete.jsx":"5","E:\\GOKADA_MAP-master\\src\\Components\\Marker.jsx":"6","E:\\Bello files\\logistics\\LogisticFullApplication\\Web Application Codes\\ride\\src\\index.js":"7"},{"size":478,"mtime":1618142928000,"results":"8","hashOfConfig":"9"},{"size":212,"mtime":1618142928000,"results":"10","hashOfConfig":"9"},{"size":362,"mtime":1618142928000,"results":"11","hashOfConfig":"9"},{"size":5100,"mtime":1618142928000,"results":"12","hashOfConfig":"9"},{"size":1863,"mtime":1618142928000,"results":"13","hashOfConfig":"9"},{"size":713,"mtime":1618142928000,"results":"14","hashOfConfig":"9"},{"size":437,"mtime":1618169731212,"results":"15","hashOfConfig":"16"},{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},"1gnt637",{"filePath":"20","messages":"21","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"22","usedDeprecatedRules":"19"},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27","usedDeprecatedRules":"19"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"19"},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"19"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1eq7x2j","E:\\GOKADA_MAP-master\\src\\index.js",[],["35","36"],"E:\\GOKADA_MAP-master\\src\\App.js",["37"],"import logo from \"./logo.svg\";\n\nimport MapsPage from \"./Screens/MapsPage\";\n\n\nfunction App() {\n  return (\n    <>\n      \n      <MapsPage />\n      {/* <GoogleMapsReactPage /> */}\n    </>\n  );\n}\n\nexport default App;\n","E:\\GOKADA_MAP-master\\src\\reportWebVitals.js",[],"E:\\GOKADA_MAP-master\\src\\Screens\\MapsPage.js",["38","39","40","41","42","43"],"import { useEffect, useState } from \"react\";\nimport GoogleMapReact from \"google-map-react\";\nimport AutoComplete from \"../Components/AutoComplete.jsx\";\nimport Marker from \"../Components/Marker\";\nimport \"../Components/Sidenav/sidenav.css\";\nimport Pin from \"../icons/location-pin.svg\";\nimport { Icon } from '@iconify/react'\nimport locationIcon from '@iconify/icons-mdi/map-marker'\n// import {\n//   GoogleMapProvider,\n//   HeatMap,\n//   InfoWindow,\n//   MapBox,\n//   Marker,\n//   OverlayView,\n//   Polygon,\n// } from '@googlemap-react/core'\n\n\nconst MapsPage = () => {\n  const [lat, setLat] = useState(9.082);\n  const [lng, setLng] = useState(8.6753);\n  const [zoom, setZoom] = useState(2);\n  const [google, setGoogle] = useState();\n  const [mapApiLoaded, setMapApiLoaded] = useState(false);\n  const [mapApi, setMapApi] = useState();\n  const [mapInstance, setMapInstance] = useState();\n\n  const [places, setPlaces] = useState([]);\n  \n  \n  useEffect(() => {\n    if (places.length===3) {\n       setPlaces([])\n    }\n    console.log(Pin)\n}, [places])\n\n  const handleClick = ({ lat, lng }) => {\n    console.log(lat, lng);\n    setLat(lat);\n    setLng(lng);\n    setZoom(zoom + 2);\n  };\n   console.log(places.length)\n  const handleApiLoaded = (map, maps) => {\n    setMapApi(maps);\n    setMapInstance(map);\n    setMapApiLoaded(true);\n    \n  };\n  const [stateInfo, setStateInfo] = useState([]);\n  \n  \n\n  //  const LocationPin = ({ text }) => (\n  //    <div className=\"pin\">\n  //      <Icon icon={locationIcon} className=\"pin-icon\" />\n  //      <p className=\"pin-text\">{text}</p>\n  //    </div>\n  //  )\n  return (\n    <>\n    \n        \n      <div\n        style={{\n          display: \"flex\",\n          height: \"100vh\",\n        }}\n      >\n        <div\n          style={{\n            flex:0.95,\n            font: \"1.4rem\",\n            margin:\"0 auto\",\n            \n          }}\n        >  \n          \n            <h3 className=\"text-center text-capitalize\">Parcel request</h3>\n            {mapApiLoaded && (\n            <div className=\"mb-4\">\n              \n              <AutoComplete\n                map={mapInstance}\n                mapApi={mapApi}\n                addplace={async (place) => {\n                  setPlaces([...places, place]);\n                  const { address_components } = place;\n                  \n                  const { short_name } = address_components[\n                    address_components.length - 2\n                  ];\n                  \n                  console.log(short_name)\n                  const res = await fetch(\n                    `https://pvc-api.osinachi.me/api/states/${short_name}`\n                  );\n                  const data = await res.json();\n                  console.log(data);\n                }}\n                searchfield={\"Pickup address\"}\n              />\n            </div>\n          )}\n\n          {mapApiLoaded && (\n            <div className=\"mb-4\">\n               <AutoComplete\n                map={mapInstance}\n                mapApi={mapApi}\n                addplace={async (place) => {\n                  setPlaces([...places, place]);\n                  const { address_components } = place;\n                  const { short_name } = address_components[\n                    address_components.length - 2\n                  ];\n                  console.log(short_name);\n                  const res = await fetch(\n                    `https://pvc-api.osinachi.me/api/states/${short_name}`\n                  );\n                  const data = await res.json();\n                  console.log(data);\n                }}\n                searchfield={\"Dropoff address\"}\n              /> \n\n             </div> \n          )}\n\n           \n          \n          <GoogleMapReact\n            onClick={handleClick}\n            bootstrapURLKeys={{\n              key:process.env.REACT_APP_GOOGLE_MAPS_API_KEY,\n              libraries: [\"places\", \"geometry\"],\n            }}\n            defaultCenter={{ lat, lng }}\n            defaultZoom={zoom}\n            center={{ lat, lng }}\n            zoom={zoom}\n            yesIWantToUseGoogleMapApiInternals\n            onGoogleApiLoaded={({ map, maps }) => handleApiLoaded(map, maps)}\n          >\n          \n          {\n              places.map((place,index) => (\n                <Marker\n                  key={index}\n                  text={Pin}\n                  lat={place.geometry.location.lat()}\n                  lng={place.geometry.location.lng()}\n                />\n                \n              ))}\n                 \n                 \n               \n              {/* { <LocationPin\n                  lat={lat}\n                  lng={lng}\n                  text={locator}\n                /> } */}\n\n              {/* {places.length > 1 &&\n              places.map((place) => (\n                <Marker\n                  key={place.id}\n                  text={Pin}\n                  lat={place.geometry.location.lat()}\n                  lng={place.geometry.location.lng()}\n                />\n              ))}      */}\n          </GoogleMapReact>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default MapsPage;\n","E:\\GOKADA_MAP-master\\src\\Components\\AutoComplete.jsx",["44"],"import React, { Component } from \"react\";\nimport styled from \"styled-components\";\n\nconst Wrapper = styled.div`\n  position: relative;\n  align-items: center;\n  justify-content: center;\n  width: 100%;\n  padding: 20px;\n`;\n\nclass AutoComplete extends Component {\n  constructor(props) {\n    super(props);\n    this.clearSearchBox = this.clearSearchBox.bind(this);\n  }\n\n  componentDidMount({ map, mapApi } = this.props) {\n    const options = {\n      // restrict your search to a specific type of result\n      // types: ['geocode', 'address', 'establishment', '(regions)', '(cities)'],\n      // restrict your search to a specific country, or an array of countries\n      // componentRestrictions: { country: ['gb', 'us'] },\n    };\n    \n    this.autoComplete = new mapApi.places.Autocomplete(\n      this.searchInput,\n      options\n    );\n    \n    this.autoComplete.addListener(\"place_changed\", this.onPlaceChanged);\n    this.autoComplete.bindTo(\"bounds\", map);\n  }\n\n  componentWillUnmount({ mapApi } = this.props) {\n    mapApi.event.clearInstanceListeners(this.searchInput);\n  }\n\n  onPlaceChanged = ({ map, addplace } = this.props) => {\n    const place = this.autoComplete.getPlace();\n    if (!place.geometry) return;\n    if (place.geometry.viewport) {\n      map.fitBounds(place.geometry.viewport);\n    } else {\n      map.setCenter(place.geometry.location);\n      map.setZoom(17);\n    }\n   \n    \n    addplace(place);\n    this.searchInput.blur();\n  };\n\n  clearSearchBox() {\n    this.searchInput.value = \"\";\n  }\n\n  render() {\n    return (\n      // <Wrapper>\n        <input\n          ref={(ref) => {\n            this.searchInput = ref;\n          }}\n          type=\"text\"\n          onFocus={this.clearSearchBox}\n          className=\"form-control color-white\"\n          placeholder={this.props.searchfield}\n        />\n     //</Wrapper>\n    );\n  }\n}\n\nexport default AutoComplete;\n","E:\\GOKADA_MAP-master\\src\\Components\\Marker.jsx",[],"E:\\Bello files\\logistics\\LogisticFullApplication\\Web Application Codes\\ride\\src\\index.js",[],{"ruleId":"45","replacedBy":"46"},{"ruleId":"47","replacedBy":"48"},{"ruleId":"49","severity":1,"message":"50","line":1,"column":8,"nodeType":"51","messageId":"52","endLine":1,"endColumn":12},{"ruleId":"49","severity":1,"message":"53","line":7,"column":10,"nodeType":"51","messageId":"52","endLine":7,"endColumn":14},{"ruleId":"49","severity":1,"message":"54","line":8,"column":8,"nodeType":"51","messageId":"52","endLine":8,"endColumn":20},{"ruleId":"49","severity":1,"message":"55","line":24,"column":10,"nodeType":"51","messageId":"52","endLine":24,"endColumn":16},{"ruleId":"49","severity":1,"message":"56","line":24,"column":18,"nodeType":"51","messageId":"52","endLine":24,"endColumn":27},{"ruleId":"49","severity":1,"message":"57","line":52,"column":10,"nodeType":"51","messageId":"52","endLine":52,"endColumn":19},{"ruleId":"49","severity":1,"message":"58","line":52,"column":21,"nodeType":"51","messageId":"52","endLine":52,"endColumn":33},{"ruleId":"49","severity":1,"message":"59","line":4,"column":7,"nodeType":"51","messageId":"52","endLine":4,"endColumn":14},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","'Icon' is defined but never used.","'locationIcon' is defined but never used.","'google' is assigned a value but never used.","'setGoogle' is assigned a value but never used.","'stateInfo' is assigned a value but never used.","'setStateInfo' is assigned a value but never used.","'Wrapper' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]