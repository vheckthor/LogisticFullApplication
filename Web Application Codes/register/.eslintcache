[{"E:\\Bello files\\B.MAN\\programing stuff\\logistics\\LogisticFullApplication\\Web Application Codes\\register\\src\\index.js":"1","E:\\Bello files\\B.MAN\\programing stuff\\logistics\\LogisticFullApplication\\Web Application Codes\\register\\src\\components\\App.js":"2"},{"size":422,"mtime":1610551088666,"results":"3","hashOfConfig":"4"},{"size":7147,"mtime":1611152601899,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"ijkyp7",{"filePath":"9","messages":"10","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"E:\\Bello files\\B.MAN\\programing stuff\\logistics\\LogisticFullApplication\\Web Application Codes\\register\\src\\index.js",[],["12","13"],"E:\\Bello files\\B.MAN\\programing stuff\\logistics\\LogisticFullApplication\\Web Application Codes\\register\\src\\components\\App.js",["14","15"],"import React from 'react';\r\nimport Avatar from '@material-ui/core/Avatar';\r\nimport { Formik } from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport \"./main.css\";\r\nimport CssBaseline from '@material-ui/core/CssBaseline';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\nimport Link from '@material-ui/core/Link';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Container from '@material-ui/core/Container';\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    marginTop: theme.spacing(2),\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'center',\r\n  },\r\n  pap: {\r\n    boxShadow:'3px 5px 2px rgba(112, 128, 144, .5)',\r\n    border: '2px solid rgb(236, 203, 203)',\r\n    padding:'0% !mportant',\r\n    width:'30%',\r\n    // height:'auto',\r\n    marginTop:'2.5%',\r\n    borderRadius:' 4%',\r\n  },\r\n  avatar: {\r\n    // margin: theme.spacing(0),\r\n    marginLeft:'45%',\r\n    backgroundColor: theme.palette.secondary.main,\r\n  },\r\n  form: {\r\n    width: '100%', // Fix IE 11 issue.\r\n    padding:'0%',\r\n    marginTop: theme.spacing(0),\r\n    \r\n  },\r\n  agree: {    \r\n    fontSize:'11px',\r\n    display:'inlineFlex',\r\n    fontWeight:'100',\r\n  },\r\n  submit: {\r\n    width:'40%',\r\n    // marginTop: '2%',\r\n    padding:'1%',\r\n    // marginBottom:'0.5%',\r\n    marginLeft:'30%',\r\n    fontSize:'12px',\r\n  },\r\n}));\r\n\r\nexport default function SignUp() {\r\n  const classes = useStyles();\r\n    return(\r\n      <Formik\r\n      initialValues={{LastName: \"\", FirstName: \"\", email: \"\", password: \"\" }}\r\n      onSubmit={(values, { setSubmitting }) => {\r\n        setTimeout(() => {\r\n          console.log(\"Logging in\", values);\r\n          setSubmitting(false);\r\n        }, 500);\r\n      }}\r\n      //********Handling validation messages yourself*******/\r\n      // validate={values => {\r\n      //   let errors = {};\r\n      //   if (!values.email) {\r\n      //     errors.email = \"Required\";\r\n      //   } else if (!EmailValidator.validate(values.email)) {\r\n      //     errors.email = \"Invalid email address\";\r\n      //   }\r\n  \r\n      //   const passwordRegex = /(?=.*[0-9])/;\r\n      //   if (!values.password) {\r\n      //     errors.password = \"Required\";\r\n      //   } else if (values.password.length < 8) {\r\n      //     errors.password = \"Password must be 8 characters long.\";\r\n      //   } else if (!passwordRegex.test(values.password)) {\r\n      //     errors.password = \"Invalida password. Must contain one number\";\r\n      //   }\r\n  \r\n      //   return errors;\r\n      // }}\r\n      //********Using Yum for validation********/\r\n  \r\n      validationSchema={Yup.object().shape({\r\n        FirstName: Yup.string()\r\n          // .FirstName()\r\n          .required(\"Required\"),\r\n        LastName: Yup.string()\r\n          // .LastName()\r\n          .required(\"Required\"),\r\n        email: Yup.string().email().required(\"Required\"),\r\n        password: Yup.string()\r\n          .required(\"No password provided.\")\r\n          .min(8, \"Password is too short - should be 8 chars minimum.\")\r\n          .matches(/(?=.*[0-9])/, \"Password must contain a number.\"),\r\n      })}\r\n    >\r\n      {(props) => {\r\n        const {\r\n          values,\r\n          touched,\r\n          errors,\r\n          isSubmitting,\r\n          handleChange,\r\n          handleBlur,\r\n          handleSubmit,\r\n        } = props;\r\n  \r\n        return (\r\n            <Container className={classes.pap}>\r\n                <div className={classes.paper}>\r\n                <CssBaseline />\r\n          <form onSubmit={handleSubmit} className={classes.form}>\r\n            <Avatar className={classes.avatar}>\r\n              {/* <LockOutlinedIcon /> */}\r\n            </Avatar>\r\n            <Typography component=\"h1\" variant=\"h5\">\r\n              Sign up\r\n            </Typography>\r\n            <label htmlFor=\"FirstName\">First Name</label>\r\n            <input\r\n              name=\"FirstName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your First Name\"\r\n              value={values.FirstName}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              className={errors.FirstName && touched.email && \"error\"}\r\n              />\r\n              {errors.FirstName && touched.email && (\r\n                <div className=\"input-feedback\">{errors.email}</div>\r\n              )}\r\n            <label htmlFor=\"LastName\">Last Name</label>\r\n            <input\r\n              name=\"LastName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your Last Name\"\r\n              value={values.LastName}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              className={errors.LastName && touched.email && \"error\"}\r\n              />\r\n              {errors.LastName && touched.email && (\r\n                <div className=\"input-feedback\">{errors.email}</div>\r\n              )}\r\n            <label htmlFor=\"email\">Email</label>\r\n            <input\r\n              name=\"email\"\r\n              type=\"text\"\r\n              placeholder=\"Enter your email\"\r\n              value={values.email}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              className={errors.email && touched.email && \"error\"}\r\n            />\r\n            {errors.email && touched.email && (\r\n              <div className=\"input-feedback\">{errors.email}</div>\r\n            )}\r\n            <label htmlFor=\"email\">Password</label>\r\n            <input\r\n              name=\"password\"\r\n              type=\"password\"\r\n              placeholder=\"Enter your password\"\r\n              value={values.password}\r\n              onChange={handleChange}\r\n              onBlur={handleBlur}\r\n              className={errors.password && touched.password && \"error\"}\r\n            />\r\n            {errors.password && touched.password && (\r\n              <div className=\"input-feedback\">{errors.password}</div>\r\n            )}\r\n            <FormControlLabel\r\n              control={<Checkbox className=\"terms\" value=\"allowExtraEmails\" required color=\"primary\" />}\r\n              label=\"I Agree to Terms and Conditions.\"\r\n              className={classes.agree}\r\n            />\r\n            <button type=\"submit\" className={classes.submit} variant=\"contained\" disabled={isSubmitting}>\r\n              Sign Up\r\n            </button>\r\n            <div className=\"social\">\r\n              <div className=\"socialSpan\">OR Sign Up With</div>\r\n              <div className=\"socials\">\r\n                <a href=\"\" className=\"socialf\" >\r\n                <i class=\"fa fa-facebook-f\" aria-hidden=\"true\"></i>\r\n                  acebook</a>\r\n                OR\r\n                <a href=\"\" className=\"socialg\" >\r\n                <i class=\"fa fa-google\" aria-hidden=\"true\"></i>\r\n                  oogle</a>\r\n              </div>\r\n            </div>\r\n            <Link href=\"#\" variant=\"body2\">\r\n              <i className=\"signInAcc\">\r\n                Already have an account? Sign in\r\n              </i>\r\n            </Link>\r\n          </form>\r\n          </div>\r\n              </Container>\r\n        );\r\n      }}\r\n    </Formik>\r\n  \r\n    )\r\n}\r\n\r\n\r\n\r\n\r\n\r\n",{"ruleId":"16","replacedBy":"17"},{"ruleId":"18","replacedBy":"19"},{"ruleId":"20","severity":1,"message":"21","line":189,"column":17,"nodeType":"22","endLine":189,"endColumn":49},{"ruleId":"20","severity":1,"message":"21","line":193,"column":17,"nodeType":"22","endLine":193,"endColumn":49},"no-native-reassign",["23"],"no-negated-in-lhs",["24"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]